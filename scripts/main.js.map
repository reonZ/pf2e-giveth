{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/socket.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/hook.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///./src/apps/popup.ts","webpack:///./src/giveth.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/notification.ts","webpack:///./src/utils.ts","webpack:///./src/canvas.ts","webpack:///./src/sheet.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/dc.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/spell.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/utils.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/item.ts","webpack:///./src/taketh.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/uuid.ts","webpack:///./src/main.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/user.ts"],"sourcesContent":["export let MODULE_ID = ''\r\nexport let TYPE = 'module'\r\n\r\nexport function setModuleID(id: string, isSystem = false) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n    TYPE = isSystem ? 'system' : 'module'\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function socketOn<T extends SocketPacket = SocketPacket>(callback: SocketCallback<T>) {\r\n    game.socket.on(`module.${MODULE_ID}`, callback)\r\n}\r\n\r\nexport function socketEmit<T extends SocketPacket = SocketPacket>(packet: T) {\r\n    game.socket.emit(`module.${MODULE_ID}`, packet)\r\n}\r\n","export function registerUpstreamHook(hook: string, fn: (...args: any) => void) {\r\n    const id = Hooks.on(hook, fn)\r\n    const index = Hooks.events[hook].findIndex(x => x.id === id)\r\n    if (index !== 0) {\r\n        const [hooked] = Hooks.events[hook].splice(index, 1)\r\n        Hooks.events[hook].unshift(hooked)\r\n    }\r\n}\r\n","import { MODULE_ID, TYPE } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `${TYPE}s/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `${TYPE}s/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number | boolean>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function localizeTemplate(key: string, { hash }: { hash: Record<string, string> }) {\r\n    return localize(`${key}`, hash)\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: (key: string) => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        template: {\r\n            value: (key: string, { hash }: { hash: Record<string, string> }) => fn(key, hash),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n        path: (key: string) => string\r\n        template: (key: string, options: { hash: Record<string, string> }) => string\r\n    }\r\n}\r\n","export class MoveLootPopup extends FormApplication<{}, MoveLootOptions> {\r\n    onSubmitCallback: MoveLootCallback\r\n\r\n    constructor(object: ActorPF2e, options: Partial<MoveLootOptions>, callback: MoveLootCallback) {\r\n        super(object, options)\r\n\r\n        this.onSubmitCallback = callback\r\n    }\r\n\r\n    override async getData() {\r\n        const [prompt, buttonLabel] = this.options.isPurchase\r\n            ? ['PF2E.loot.PurchaseLootMessage', 'PF2E.loot.PurchaseLoot']\r\n            : ['PF2E.loot.MoveLootMessage', 'PF2E.loot.MoveLoot']\r\n\r\n        return {\r\n            ...(await super.getData()),\r\n            maxQuantity: this.options.maxQuantity,\r\n            newStack: this.options.newStack,\r\n            lockStack: this.options.lockStack,\r\n            prompt,\r\n            buttonLabel,\r\n        }\r\n    }\r\n\r\n    static override get defaultOptions(): MoveLootOptions {\r\n        return {\r\n            ...super.defaultOptions,\r\n            id: 'MoveLootPopup',\r\n            classes: [],\r\n            title: game.i18n.localize('PF2E.loot.MoveLootPopupTitle'),\r\n            template: 'systems/pf2e/templates/popups/loot/move-loot-popup.hbs',\r\n            width: 'auto',\r\n            maxQuantity: 1,\r\n            newStack: false,\r\n            lockStack: false,\r\n            isPurchase: false,\r\n        }\r\n    }\r\n\r\n    override async _updateObject(_event: ElementDragEvent, formData: Record<string, unknown> & MoveLootFormData): Promise<void> {\r\n        this.onSubmitCallback(formData.quantity, formData.newStack)\r\n    }\r\n}\r\n","import { warn } from '@utils/foundry/notification'\r\nimport { MoveLootPopup } from '@apps/popup'\r\nimport { socketEmit } from '@utils/socket'\r\n\r\nexport function giveth(origin: ActorPF2e, target: ActorPF2e, item: GivethItem, value: number | undefined) {\r\n    const ownerId = origin.id\r\n    const targetId = target.id\r\n    const isIndex = !(item instanceof Item)\r\n\r\n    if (!isIndex && item.isOfType('physical')) {\r\n        const qty = item.quantity\r\n        if (qty < 1) return warn('notification.zero')\r\n\r\n        if (qty === 1) return sendPhysicalRequest(ownerId, targetId, item.id, 1, false)\r\n\r\n        new MoveLootPopup(origin, { maxQuantity: qty, lockStack: false, isPurchase: false }, (qty, stack) => {\r\n            sendPhysicalRequest(ownerId, targetId, item.id, qty, stack)\r\n        }).render(true)\r\n    } else {\r\n        const uuid: ItemUUID = isIndex ? `Compendium.${item.pack}.${item._id}` : item.uuid\r\n        if (item.type === 'condition') {\r\n            socketEmit<ConditionPacket>({\r\n                type: 'giveth-condition',\r\n                targetId,\r\n                value: value ?? 1,\r\n                uuid,\r\n            })\r\n        } else {\r\n            socketEmit<EffectPacket>({\r\n                type: 'giveth-effect',\r\n                targetId,\r\n                uuid,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction sendPhysicalRequest(ownerId: string, targetId: string, itemId: string, qty: number, stack: boolean) {\r\n    socketEmit<PhysicalPacket>({\r\n        type: 'giveth-physical',\r\n        ownerId,\r\n        targetId,\r\n        itemId,\r\n        qty,\r\n        stack,\r\n    })\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\n\r\nexport type NotifyArgs = [str: string, arg1?: boolean | Record<string, string | number | boolean>, arg2?: boolean]\r\n\r\nfunction notify(\r\n    str: string,\r\n    arg1?: 'warning' | 'info' | 'error' | boolean | Record<string, string | number | boolean>,\r\n    arg2?: boolean | Record<string, string | number | boolean>,\r\n    arg3?: boolean\r\n) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n","export function getDetailsFromData(\r\n    data: DropCanvasItemDataPF2e\r\n): { actor: ActorPF2e; item: GivethItem; value?: number } | undefined {\r\n    if (data.tokenId || data.type !== 'Item' || !data.uuid) return\r\n\r\n    const item = fromUuidSync(data.uuid) as GivethItem\r\n    if (!item) return\r\n\r\n    let actor: ActorPF2e | null = item.actor\r\n    if (!actor) {\r\n        const actorUUID = data.context?.origin.actor\r\n        actor = actorUUID ? fromUuidSync<ActorPF2e>(actorUUID) : null\r\n    }\r\n    if (!isValidActor(actor) || !actor.isOwner) return\r\n\r\n    const isIndex = !(item instanceof Item)\r\n    if (isIndex && item.pack && ['effect', 'condition'].includes(item.type)) return { actor, item, value: data.value }\r\n    if (!isIndex && item.isOfType('physical', 'effect')) return { actor, item, value: data.value }\r\n}\r\n\r\nexport function isValidActor(actor: ActorPF2e | null | undefined, id?: string): actor is CharacterPF2e | NPCPF2e | VehiclePF2e {\r\n    if (!actor || (id && actor.id === id)) return false\r\n    return actor.hasPlayerOwner && !actor.isToken && actor.isOfType('character', 'npc', 'vehicle')\r\n}\r\n\r\nexport function isGMOnline() {\r\n    return game.users.some(user => user.active && user.isGM)\r\n}\r\n","import { giveth } from './giveth'\r\nimport { getDetailsFromData, isGMOnline, isValidActor } from './utils'\r\n\r\nexport function onDropCanvasData(canvas: CanvasPF2e, data: DropCanvasItemDataPF2e) {\r\n    if (!isGMOnline()) return true\r\n\r\n    const details = getDetailsFromData(data)\r\n    if (!details) return true\r\n\r\n    const target = canvas.tokens.placeables\r\n        .slice()\r\n        .filter(token => {\r\n            if (!token.document.actorLink) return false\r\n            const target = token.actor\r\n            if (!isValidActor(target, data.actorId) || target.isOwner) return false\r\n            const maximumX = token.x + (token.hitArea?.right ?? 0)\r\n            const maximumY = token.y + (token.hitArea?.bottom ?? 0)\r\n            return data.x >= token.x && data.y >= token.y && data.x <= maximumX && data.y <= maximumY\r\n        })\r\n        .sort((a, b) => b.document.sort - a.document.sort)\r\n        .at(0)?.actor\r\n\r\n    if (!target) return true\r\n\r\n    giveth(details.actor, target, details.item, details.value)\r\n    return false\r\n}\r\n","import { giveth } from './giveth'\r\nimport { getDetailsFromData, isGMOnline, isValidActor } from './utils'\r\n\r\nexport function onDropActorSheetData(target: ActorPF2e, _: ActorSheetPF2e, data: DropCanvasItemDataPF2e) {\r\n    if (!isGMOnline() || target.isOwner || !isValidActor(target, data.actorId)) return true\r\n\r\n    const details = getDetailsFromData(data)\r\n    if (!details) return true\r\n\r\n    giveth(details.actor, target, details.item, details.value)\r\n    return false\r\n}\r\n","const dcByLevel = new Map<number, number>()\r\ndcByLevel.set(-1, 13)\r\ndcByLevel.set(0, 14)\r\ndcByLevel.set(1, 15)\r\ndcByLevel.set(2, 16)\r\ndcByLevel.set(3, 18)\r\ndcByLevel.set(4, 19)\r\ndcByLevel.set(5, 20)\r\ndcByLevel.set(6, 22)\r\ndcByLevel.set(7, 23)\r\ndcByLevel.set(8, 24)\r\ndcByLevel.set(9, 26)\r\ndcByLevel.set(10, 27)\r\ndcByLevel.set(11, 28)\r\ndcByLevel.set(12, 30)\r\ndcByLevel.set(13, 31)\r\ndcByLevel.set(14, 32)\r\ndcByLevel.set(15, 34)\r\ndcByLevel.set(16, 35)\r\ndcByLevel.set(17, 36)\r\ndcByLevel.set(18, 38)\r\ndcByLevel.set(19, 39)\r\ndcByLevel.set(20, 40)\r\ndcByLevel.set(21, 42)\r\ndcByLevel.set(22, 44)\r\ndcByLevel.set(23, 46)\r\ndcByLevel.set(24, 48)\r\ndcByLevel.set(25, 50)\r\n\r\nconst dcAdjustments = new Map<DCAdjustment, number>()\r\ndcAdjustments.set('incredibly easy', -10)\r\ndcAdjustments.set('very easy', -5)\r\ndcAdjustments.set('easy', -2)\r\ndcAdjustments.set('normal', 0)\r\ndcAdjustments.set('hard', 2)\r\ndcAdjustments.set('very hard', 5)\r\ndcAdjustments.set('incredibly hard', 10)\r\n\r\n/**\r\n * Normal Level Based DCs\r\n * @param level\r\n * @param proficiencyWithoutLevel\r\n */\r\nexport function calculateDC(level: number, { proficiencyWithoutLevel = false, rarity = 'common' }: DCOptions = {}): number {\r\n    // assume level 0 if garbage comes in. We cast level to number because the backing data may actually have it\r\n    // stored as a string, which we can't catch at compile time\r\n    const dc = dcByLevel.get(level) ?? 14\r\n    if (proficiencyWithoutLevel) {\r\n        // -1 shouldn't be subtracted since it's just\r\n        // a creature level and not related to PC levels\r\n        return adjustDCByRarity(dc - Math.max(level, 0), rarity)\r\n    } else {\r\n        return adjustDCByRarity(dc, rarity)\r\n    }\r\n}\r\n\r\nexport function adjustDCByRarity(dc: number, rarity: Rarity = 'common') {\r\n    return adjustDC(dc, rarityToDCAdjustment(rarity))\r\n}\r\n\r\nexport function adjustDC(dc: number, adjustment: DCAdjustment = 'normal') {\r\n    return dc + (dcAdjustments.get(adjustment) ?? 0)\r\n}\r\n\r\nexport function rarityToDCAdjustment(rarity: Rarity = 'common'): PositiveDCAdjustment {\r\n    if (rarity === 'uncommon') {\r\n        return 'hard'\r\n    } else if (rarity === 'rare') {\r\n        return 'very hard'\r\n    } else if (rarity === 'unique') {\r\n        return 'incredibly hard'\r\n    } else {\r\n        return 'normal'\r\n    }\r\n}\r\n","import { chatUUID } from '@utils/foundry/uuid'\r\n\r\nexport const MAGIC_TRADITIONS = new Set(['arcane', 'divine', 'occult', 'primal'] as const)\r\n\r\nexport const SPELL_COMPONENTS = ['focus', 'material', 'somatic', 'verbal'] as const\r\n\r\nconst scrolls: (ConsumablePF2e | null)[] = []\r\nexport async function createSpellScroll(uuid: ItemUUID, level: OneToTen | false, temp = false) {\r\n    const spell = (await fromUuid<SpellPF2e>(uuid))?.toObject()\r\n    if (!spell) return null\r\n\r\n    if (level === false) level = spell.system.level.value\r\n\r\n    const scrollUUID = getScrollCompendiumUUID(level)\r\n    scrolls[level] ??= await fromUuid<ConsumablePF2e>(scrollUUID)\r\n\r\n    const scroll = scrolls[level]?.toObject()\r\n    if (!scroll) return null\r\n\r\n    spell.system.location.heightenedLevel = level\r\n\r\n    scroll.name = `Scroll of ${spell.name} (Level ${level})`\r\n    scroll.system.temporary = temp\r\n    scroll.system.spell = spell\r\n    scroll.system.traits.value.push(...spell.system.traditions.value)\r\n\r\n    const sourceId = spell.flags.core?.sourceId\r\n    if (sourceId) scroll.system.description.value = `${chatUUID(sourceId)}\\n<hr />${scroll.system.description.value}`\r\n\r\n    return scroll\r\n}\r\n\r\nfunction getScrollCompendiumUUID(level: OneToTen): ItemUUID {\r\n    return `Compendium.pf2e.equipment-srd.${scrollCompendiumIds[level]}`\r\n}\r\n\r\nconst scrollCompendiumIds: Record<number, string> = {\r\n    1: 'RjuupS9xyXDLgyIr', // Compendium.pf2e.equipment-srd.RjuupS9xyXDLgyIr\r\n    2: 'Y7UD64foDbDMV9sx',\r\n    3: 'ZmefGBXGJF3CFDbn',\r\n    4: 'QSQZJ5BC3DeHv153',\r\n    5: 'tjLvRWklAylFhBHQ',\r\n    6: '4sGIy77COooxhQuC',\r\n    7: 'fomEZZ4MxVVK3uVu',\r\n    8: 'iPki3yuoucnj7bIt',\r\n    9: 'cFHomF3tty8Wi1e5',\r\n    10: 'o1XIHJ4MJyroAHfF',\r\n}\r\n","const wordCharacter = String.raw`[\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]`\r\nconst nonWordCharacter = String.raw`[^\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]`\r\nconst nonWordCharacterRE = new RegExp(nonWordCharacter, 'gu')\r\n\r\nconst wordBoundary = String.raw`(?:${wordCharacter})(?=${nonWordCharacter})|(?:${nonWordCharacter})(?=${wordCharacter})`\r\nconst nonWordBoundary = String.raw`(?:${wordCharacter})(?=${wordCharacter})`\r\nconst lowerCaseLetter = String.raw`\\p{Lowercase_Letter}`\r\nconst upperCaseLetter = String.raw`\\p{Uppercase_Letter}`\r\nconst lowerCaseThenUpperCaseRE = new RegExp(`(${lowerCaseLetter})(${upperCaseLetter}${nonWordBoundary})`, 'gu')\r\n\r\nconst nonWordCharacterHyphenOrSpaceRE = /[^-\\p{White_Space}\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]/gu\r\nconst upperOrWordBoundariedLowerRE = new RegExp(`${upperCaseLetter}|(?:${wordBoundary})${lowerCaseLetter}`, 'gu')\r\n\r\n/**\r\n * The system's sluggification algorithm for labels and other terms.\r\n * @param text The text to sluggify\r\n * @param [options.camel=null] The sluggification style to use\r\n */\r\nexport function sluggify(text: string, { camel = null }: { camel?: 'dromedary' | 'bactrian' | null } = {}): string {\r\n    // Sanity check\r\n    if (typeof text !== 'string') {\r\n        console.warn('Non-string argument passed to `sluggify`')\r\n        return ''\r\n    }\r\n\r\n    switch (camel) {\r\n        case null:\r\n            return text\r\n                .replace(lowerCaseThenUpperCaseRE, '$1-$2')\r\n                .toLowerCase()\r\n                .replace(/['’]/g, '')\r\n                .replace(nonWordCharacterRE, ' ')\r\n                .trim()\r\n                .replace(/[-\\s]+/g, '-')\r\n        case 'bactrian': {\r\n            const dromedary = sluggify(text, { camel: 'dromedary' })\r\n            return dromedary.charAt(0).toUpperCase() + dromedary.slice(1)\r\n        }\r\n        case 'dromedary':\r\n            return text\r\n                .replace(nonWordCharacterHyphenOrSpaceRE, '')\r\n                .replace(/[-_]+/g, ' ')\r\n                .replace(upperOrWordBoundariedLowerRE, (part, index) => (index === 0 ? part.toLowerCase() : part.toUpperCase()))\r\n                .replace(/\\s+/g, '')\r\n        default:\r\n            throw ErrorPF2e(\"I don't think that's a real camel.\")\r\n    }\r\n}\r\n\r\nexport function ErrorPF2e(message: string): Error {\r\n    return Error(`PF2e System | ${message}`)\r\n}\r\n\r\n/** Check if an element is present in the provided set. Especially useful for checking against literal sets */\r\nexport function setHasElement<T extends Set<unknown>>(set: T, value: unknown): value is SetElement<T> {\r\n    return set.has(value)\r\n}\r\n","import { adjustDCByRarity, calculateDC } from '@utils/pf2e/dc'\r\nimport { MAGIC_TRADITIONS } from '@utils/pf2e/spell'\r\nimport { setHasElement } from '@utils/pf2e/utils'\r\n\r\nexport function identifyItem(\r\n    item: PhysicalItemPF2e,\r\n    { proficiencyWithoutLevel = false, notMatchingTraditionModifier }: IdentifyItemOptions\r\n): GenericIdentifyDCs | IdentifyMagicDCs | IdentifyAlchemyDCs {\r\n    const baseDC = calculateDC(item.level, { proficiencyWithoutLevel })\r\n    const rarity = getDcRarity(item)\r\n    const dc = adjustDCByRarity(baseDC, rarity)\r\n    if (item.isMagical) {\r\n        return identifyMagic(item, dc, notMatchingTraditionModifier)\r\n    } else if (item.isAlchemical) {\r\n        return { cra: dc }\r\n    } else {\r\n        return { dc: dc }\r\n    }\r\n}\r\n\r\n/** All cursed items are incredibly hard to identify */\r\nfunction getDcRarity(item: PhysicalItemPF2e): Rarity {\r\n    return item.traits.has('cursed') ? 'unique' : item.rarity\r\n}\r\n\r\nfunction identifyMagic(item: PhysicalItemPF2e, baseDc: number, notMatchingTraditionModifier: number) {\r\n    const result = {\r\n        occult: baseDc,\r\n        primal: baseDc,\r\n        divine: baseDc,\r\n        arcane: baseDc,\r\n    }\r\n    const traditions = getMagicTraditions(item)\r\n    for (const key of MAGIC_TRADITIONS) {\r\n        // once an item has a magic tradition, all skills\r\n        // that don't match the tradition are hard\r\n        if (traditions.size > 0 && !traditions.has(key)) {\r\n            result[key] = baseDc + notMatchingTraditionModifier\r\n        }\r\n    }\r\n    return { arc: result.arcane, nat: result.primal, rel: result.divine, occ: result.occult }\r\n}\r\n\r\n/**\r\n * Extract all traits from an item, that match a magic tradition\r\n */\r\nfunction getMagicTraditions(item: PhysicalItemPF2e): Set<MagicTradition> {\r\n    const traits: string[] = item.system.traits.value\r\n    return new Set(traits.filter((t): t is MagicTradition => setHasElement(MAGIC_TRADITIONS, t)))\r\n}\r\n\r\nexport function getChoiSetRuleSelection<T extends unknown>(item: ItemPF2e, option: string) {\r\n    const rules = item._source.system.rules as ChoiceSetSource[]\r\n    const rule = rules.find(rule => rule.key === 'ChoiceSet' && rule.rollOption === option)\r\n    return rule?.selection as T | undefined\r\n}\r\n\r\nconst RUNE_PROPERTY_KEYS = ['propertyRune1', 'propertyRune2', 'propertyRune3', 'propertyRune4'] as const\r\n\r\nexport function getFreePropertyRuneSlot(item: WeaponPF2e | ArmorPF2e): null | typeof RUNE_PROPERTY_KEYS[number] {\r\n    const potency = item.system.potencyRune.value\r\n    if (potency === null) return null\r\n\r\n    for (let i = 0; i < potency; i++) {\r\n        const property = RUNE_PROPERTY_KEYS[i]\r\n        if (!item.system[property].value) return property\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nconst PHYSICAL_ITEM_TYPES = new Set(['armor', 'backpack', 'book', 'consumable', 'equipment', 'treasure', 'weapon'] as const)\r\n\r\n/** Checks if the given item data is a physical item with a quantity and other physical fields. */\r\nexport function isPhysicalData(source: ItemSourcePF2e): source is PhysicalItemSource\r\nexport function isPhysicalData(source: PreCreate<ItemSourcePF2e>): source is PreCreate<PhysicalItemSource>\r\nexport function isPhysicalData(source: ItemSourcePF2e | PreCreate<ItemSourcePF2e>): boolean {\r\n    return setHasElement(PHYSICAL_ITEM_TYPES, source.type)\r\n}\r\n\r\nexport function hasInvestedProperty(source: ItemSourcePF2e): source is MagicItemSource {\r\n    return isPhysicalData(source) && 'invested' in source.system.equipped\r\n}\r\n","import { hasInvestedProperty } from '@utils/pf2e/item'\r\nimport { getSetting } from '@utils/foundry/settings'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { chatUUID, fakeChatUUID } from '@utils/foundry/uuid'\r\n\r\nexport async function takethCondition({ targetId, uuid, value }: ConditionPacket) {\r\n    const target = game.actors.get(targetId)\r\n    if (!target) return\r\n\r\n    const item = await fromUuid<ConditionPF2e>(uuid)\r\n    if (!item) return\r\n\r\n    target.increaseCondition(item.slug as ConditionSlug, { min: value })\r\n}\r\n\r\nexport async function takethEffect({ targetId, uuid }: EffectPacket) {\r\n    const target = game.actors.get(targetId)\r\n    if (!target) return\r\n\r\n    const item = await fromUuid<EffectPF2e>(uuid)\r\n    if (!item) return\r\n\r\n    const source = item.clone({ 'system.tokenIcon.show': true, 'system.unidentified': false }).toObject()\r\n    target.createEmbeddedDocuments('Item', [source])\r\n}\r\n\r\nexport async function takethPhysical({ itemId, ownerId, qty, stack, targetId }: PhysicalPacket) {\r\n    const owner = game.actors.get<ActorPF2e>(ownerId)\r\n    const target = game.actors.get<ActorPF2e>(targetId)\r\n    if (!owner || !target) return\r\n\r\n    const item = owner.items.get(itemId) as PhysicalItemPF2e | undefined\r\n    if (!item) return\r\n\r\n    qty = Math.min(qty, item.quantity)\r\n    const newQty = item.quantity - qty\r\n\r\n    const obj = item.toObject()\r\n    obj.system.quantity = qty\r\n    obj.system.equipped.carryType = 'worn'\r\n    if (hasInvestedProperty(obj)) {\r\n        obj.system.equipped.invested = item.traits.has('invested') ? false : null\r\n    }\r\n\r\n    const newItem = await target.addToInventory(obj, undefined, stack)\r\n    if (!newItem) return\r\n\r\n    if (newQty < 1) item.delete()\r\n    else item.update({ 'system.quantity': newQty })\r\n\r\n    if (!getSetting('message')) return\r\n\r\n    let content = newItem.isIdentified ? chatUUID(newItem.uuid) : fakeChatUUID(newItem.name)\r\n    if (qty > 1) content += ` x${qty}`\r\n\r\n    ChatMessage.create({\r\n        flavor: `<h4 class=\"action\">${localize('giveth', { target: target.name })}</h4>`,\r\n        content,\r\n        speaker: ChatMessage.getSpeaker({ actor: owner }),\r\n    })\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<TChoices extends Record<string, unknown> | undefined>(\r\n    options: Omit<SettingRegistration<TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown>; name: string }\r\n) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register<TChoices>(MODULE_ID, name, options as SettingRegistration<TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","export function chatUUID(uuid: string, name?: string) {\r\n    if (name) return `@UUID[${uuid}]{${name}}`\r\n    return `@UUID[${uuid}]`\r\n}\r\n\r\nexport function fakeChatUUID(name: string) {\r\n    return `<span style=\"background: #DDD;\r\n    padding: 1px 4px;\r\n    border: 1px solid var(--color-border-dark-tertiary);\r\n    border-radius: 2px;\r\n    white-space: nowrap;\r\n    word-break: break-all;\">${name}</span>`\r\n}\r\n\r\nexport function documentUuidFromTableResult(result: TableResult) {\r\n    if (result.type === CONST.TABLE_RESULT_TYPES.DOCUMENT) return `${result.documentCollection}.${result.documentId}`\r\n    if (result.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM) return `Compendium.${result.documentCollection}.${result.documentId}`\r\n    return undefined\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { socketOn } from '@utils/socket'\r\nimport { registerUpstreamHook } from '@utils/foundry/hook'\r\nimport { registerSetting } from '@utils/foundry/settings'\r\nimport { onDropCanvasData } from './canvas'\r\nimport { onDropActorSheetData } from './sheet'\r\nimport { takethCondition, takethEffect, takethPhysical } from './taketh'\r\nimport { isFirstGM } from '@utils/foundry/user'\r\n\r\nexport const MODULE_ID = 'pf2e-giveth'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.once('init', () => {\r\n    registerSetting({\r\n        name: 'message',\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    })\r\n})\r\n\r\nHooks.once('ready', () => {\r\n    if (game.user.isGM) {\r\n        socketOn<Packet>(onPacketReceived)\r\n    } else {\r\n        registerUpstreamHook('dropCanvasData', onDropCanvasData)\r\n        registerUpstreamHook('dropActorSheetData', onDropActorSheetData)\r\n    }\r\n})\r\n\r\nfunction onPacketReceived(packet: Packet) {\r\n    if (!isFirstGM()) return\r\n    if (packet.type === 'giveth-condition') takethCondition(packet)\r\n    else if (packet.type === 'giveth-effect') takethEffect(packet)\r\n    else takethPhysical(packet)\r\n}\r\n","export function isFirstGM() {\r\n    if (!game.user.isGM) return false\r\n    const firstGM = game.users.find(user => user.active && user.isGM)\r\n    return game.user === firstGM\r\n}\r\n\r\nexport function getFirstGM() {\r\n    return game.users.find(user => user.active && user.isGM)\r\n}\r\n\r\nexport function isGM() {\r\n    const data = game.data as Game['data'] & { userId: string }\r\n    const user = data.users.find(x => x._id === data.userId)\r\n    return !!user && user.role >= CONST.USER_ROLES.GAMEMASTER\r\n}\r\n\r\nexport function getOwners(doc: FoundryDocument, connected = false) {\r\n    if (connected) return game.users.filter(x => x.active && doc.testUserPermission(x, 'OWNER'))\r\n    return game.users.filter(x => doc.testUserPermission(x, 'OWNER'))\r\n}\r\n\r\nexport function getOwner(doc: FoundryDocument, connected = false) {\r\n    if (connected) return game.users.find(x => x.active && doc.testUserPermission(x, 'OWNER'))\r\n    return game.users.find(x => doc.testUserPermission(x, 'OWNER'))\r\n}\r\n"],"names":["socketEmit","packet","game","socket","emit","registerUpstreamHook","hook","fn","id","Hooks","on","index","events","findIndex","x","hooked","splice","unshift","path","join","localize","args","key","data","i18n","format","MoveLootPopup","FormApplication","onSubmitCallback","constructor","object","options","callback","super","this","async","prompt","buttonLabel","isPurchase","getData","maxQuantity","newStack","lockStack","defaultOptions","classes","title","template","width","_event","formData","quantity","giveth","origin","target","item","value","ownerId","targetId","isIndex","Item","isOfType","qty","str","arg1","arg2","arg3","type","undefined","permanent","ui","notifications","notify","sendPhysicalRequest","stack","render","uuid","pack","_id","itemId","getDetailsFromData","tokenId","fromUuidSync","actor","actorUUID","context","isValidActor","isOwner","includes","hasPlayerOwner","isToken","isGMOnline","users","some","user","active","isGM","onDropCanvasData","canvas","details","tokens","placeables","slice","filter","token","document","actorLink","actorId","maximumX","hitArea","right","maximumY","y","bottom","sort","a","b","at","onDropActorSheetData","_","dcByLevel","Map","set","dcAdjustments","Set","wordCharacter","String","raw","nonWordCharacter","wordBoundary","RegExp","nonWordBoundary","lowerCaseLetter","upperCaseLetter","PHYSICAL_ITEM_TYPES","takethPhysical","owner","actors","get","items","Math","min","newQty","obj","toObject","source","system","equipped","carryType","has","isPhysicalData","invested","traits","newItem","addToInventory","delete","update","settings","content","isIdentified","name","fakeChatUUID","ChatMessage","create","flavor","speaker","getSpeaker","onPacketReceived","firstGM","find","isFirstGM","fromUuid","increaseCondition","slug","takethCondition","clone","createEmbeddedDocuments","takethEffect","isSystem","setModuleID","once","scope","config","hint","Array","isArray","choices","reduce","choice","register","registerSetting","Boolean","default"],"sourceRoot":""}